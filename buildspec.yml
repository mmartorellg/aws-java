version: 0.2

phases:
  pre_build:
    commands:
      - echo Setting SonarQube configuration...
      - SONAR_URL=http://54.171.245.10:9000
      - SONAR_TOKEN=squ_d894659922538b5363655f9aa72fb3659567334a
      - SONAR_PROJECT_KEY=aws-java-project-key
      - echo Logging in to Amazon ECR...
      - aws --version
      - REPOSITORY_URI=178934116267.dkr.ecr.eu-west-1.amazonaws.com/aws-java-registry
      - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - echo Build started on `date`
      - echo Running tests with coverage...
      - mvn clean test
      - echo Verifying JaCoCo report was generated...
      - ls -la target/site/jacoco/ || echo "JaCoCo report not found"
      - echo Running SonarQube analysis...
      - mvn sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN
      - echo Packaging application...
      - mvn package -DskipTests
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Checking SonarQube Quality Gate...
      - |
        QUALITY_GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY" | python3 -c "import sys, json; print(json.load(sys.stdin)['projectStatus']['status'])")
        echo "Quality Gate Status: $QUALITY_GATE_STATUS"
        if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
          echo "Quality Gate failed! Build will be marked as failed."
          exit 1
        fi
        echo "Quality Gate passed! Continuing with deployment..."
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - DOCKER_CONTAINER_NAME=aws-java-registry
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - target/aws-java-0.0.1-SNAPSHOT.jar
